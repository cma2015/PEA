CDSRange <- c(1, cds.len)
}
if(len.3 != 0){
UTR3Range <- c((cds.len + len.5 + 1), (len.5 + len.3 + cds.len))
}else{
UTR3Range <- c(0, 0)
}
res <- unlist(c(UTR5Range, CDSRange, UTR3Range))
}
#' @export
getUTR <- function(GTF, cpus = 1){
GTF <- read.table(GTF, sep = "\t", header = F,
stringsAsFactors = F, quote = "")
GTF$V3[grep(pattern = "5|five", x = GTF$V3)] <- "five_prime_utr"
GTF$V3[grep(pattern = "3|three", x = GTF$V3)] <- "three_prime_utr"
GTF$V9 <- gsub(pattern = "\"", replacement = "", x = GTF$V9)
curGTF <- subset(GTF, GTF$V3 == "CDS" | GTF$V3 == "five_prime_utr" | GTF$V3 == "three_prime_utr")
curGTF$V6 <- sapply(curGTF$V9,  .extractTranscriptID)
transcriptID <- unique(curGTF[,6])
if(cpus == 1){
UTRMat <- t(sapply(X = transcriptID, FUN = .getUTR, GTF = curGTF))
}else{
sfInit(parallel = TRUE, cpus = cpus)
sfExport(".getUTR", namespace = "PEA")
UTRMat <- t(sfSapply(transcriptID, .getUTR, GTF = curGTF))
sfStop()
}
UTRMat <- cbind(rownames(UTRMat), UTRMat)
colnames(UTRMat) <- c("cDNA_ID",
"five_UTR_Start",
"five_UTR_End",
"CDS_Start",
"CDS_End",
"three_UTR_Start",
"three_UTR_End")
rownames(UTRMat) <- UTRMat[,1]
UTRMat <- UTRMat[, -1]
UTRMat
}
.G2T <- function(posVec, exonGTF){
curCHR <- posVec[1]
curExon <- exonGTF[which(exonGTF[,1] == curCHR), ]
curPos1 <- as.numeric(posVec[2])
curPos2 <- as.numeric(posVec[3])
index1 <- which((as.numeric(curExon[,4]) <= curPos1) & (as.numeric(curExon[,5]) >= curPos1))
index2 <- which((as.numeric(curExon[,4]) <= curPos2) & (as.numeric(curExon[,5]) >= curPos2))
index <- unique(c(index1, index2))
if(length(index) == 0){
resMat <- NULL
}else{
resSamples1 <- NULL
resSamples2 <- NULL
resMat <- matrix(NA, nrow = length(index), ncol = 3)
for(j in 1:length(index)){
curidx <- index[j]
curExonParen <- curExon[curidx, 6]
curStrand <- curExon[curidx, 7]
curExonStart <- as.numeric(curExon[curidx, 4])
curExonStop <- as.numeric(curExon[curidx, 5])
curTranscript <- curExon[which(curExon[,6] == curExonParen), , drop = FALSE]
if(curStrand == "-"){
curTranscript <- curTranscript[order(as.numeric(curTranscript[,4]), decreasing = T), , drop = FALSE]
}
if(is.element(curidx, index1) & is.element(curidx, index2)){
curExonidx1 <- which(as.numeric(curTranscript[,4]) <= curPos1 & as.numeric(curTranscript[,5]) >= curPos1)
curExonidx2 <- which(as.numeric(curTranscript[,4]) <= curPos2 & as.numeric(curTranscript[,5]) >= curPos2)
if(curStrand == "-"){
tmpPos1 <- as.numeric(curTranscript[curExonidx1, 5]) - curPos2 + 1
tmpPos2 <- as.numeric(curTranscript[curExonidx2, 5]) - curPos1 + 1
}else{
tmpPos1 <- curPos1 - as.numeric(curTranscript[curExonidx1, 4]) + 1
tmpPos2 <- curPos2 - as.numeric(curTranscript[curExonidx2, 4]) + 1
}
ExonLen <- as.numeric(curTranscript[,5]) - as.numeric(curTranscript[,4]) + 1
ExonLen <- c(0, ExonLen)
resPos1 <- sum(ExonLen[1:curExonidx1]) + tmpPos1
resPos2 <- sum(ExonLen[1:curExonidx2]) + tmpPos2
# resSamples1 <- c(resSamples1, paste0(curExonParen, "_", as.numeric(resPos1)))
# resSamples2 <- c(resSamples2, paste0(curExonParen, "_", as.numeric(resPos2)))
}else if(is.element(curidx, index1)){
curExonidx1 <- which(as.numeric(curTranscript[,4]) <= curPos1 & as.numeric(curTranscript[,5]) >= curPos1)
curExonidx2 <- curExonidx1
if(curStrand == "-"){
tmpPos1 <- as.numeric(curTranscript[curExonidx1, 5]) - curPos1 + 1
tmpPos2 <- 0
}else{
tmpPos1 <- curPos1 - as.numeric(curTranscript[curExonidx1, 4]) + 1
tmpPos2 <- as.numeric(curTranscript[curExonidx2, 5]) - as.numeric(curTranscript[curExonidx2, 4]) + 1
}
ExonLen <- as.numeric(curTranscript[,5]) - as.numeric(curTranscript[,4]) + 1
ExonLen <- c(0, ExonLen)
resPos1 <- sum(ExonLen[1:curExonidx1]) + tmpPos1
resPos2 <- sum(ExonLen[1:curExonidx2]) + tmpPos2
# resSamples1 <- c(resSamples1, paste0(curExonParen, "_", as.numeric(resPos1)))
# resSamples2 <- c(resSamples2, paste0(curExonParen, "_", as.numeric(resPos2)))
}else{
curExonidx2 <- which(as.numeric(curTranscript[,4]) <= curPos2 & as.numeric(curTranscript[,5]) >= curPos2)
curExonidx1 <- curExonidx2
if(curStrand == "-"){
tmpPos1 <- as.numeric(curTranscript[curExonidx1, 5]) - as.numeric(curTranscript[curExonidx1, 4]) + 1
tmpPos2 <- as.numeric(curTranscript[curExonidx2, 5]) - curPos2 + 1
}else{
tmpPos1 <- 0
tmpPos2 <- curPos2 - as.numeric(curTranscript[curExonidx2, 4]) + 1
}
ExonLen <- as.numeric(curTranscript[,5]) - as.numeric(curTranscript[,4]) + 1
ExonLen <- c(0, ExonLen)
resPos1 <- sum(ExonLen[1:curExonidx1]) + tmpPos1
resPos2 <- sum(ExonLen[1:curExonidx2]) + tmpPos2
}
resStart <- min(c(resPos1, resPos2))
resStop <- max(c(resPos1, resPos2))
resMat[j,] <- c(curExonParen, resStart, resStop)
}
}
resMat
}
.extractTranscriptID <- function(x){
res <- unlist(strsplit(x, ";"))
idx <- grep("transcript_id", res)
res <- res[idx]
resID <- gsub(pattern = "transcript_id| ", replacement = "", x = res)
resID
}
#' @export
G2T <- function(bedPos, GTF){
GTF <- read.table(GTF, sep = "\t", quote = "", header = F, stringsAsFactors = F)
interChr <- intersect(GTF[,1], bedPos[,1])
if(length(interChr) == 0){
cat("The chromosomes are not consistent in the GTF and bedPos, please provide right input!")
return(NULL)
}
GTF$V9 <- gsub(pattern = "\"", replacement = "", x = GTF$V9)
exonGTF <- GTF[which(GTF$V3 == "exon"),]
exonGTF[,6] <- apply(exonGTF[, 9, drop = FALSE], 1, .extractTranscriptID)
if(ncol(bedPos) > 3){
bedPos <- bedPos[,1:3]
}
resPos <- apply(bedPos, 1, .G2T, exonGTF = exonGTF)
resPos <- do.call(rbind, resPos)
resPos
}
.geneID <- function(GTF){
GTF <- read.table(file = GTF, header = F, sep = "\t", stringsAsFactors = F, quote = "")
GTF$V9 <- gsub(pattern = "\"", replacement = "", x = GTF$V9)
GTF <- subset(x = GTF, GTF$V3 == "transcript")
curMat <- strsplit(GTF$V9, ";")
curMat <- lapply(curMat, FUN = function(x) x[1:2])
curMat <- do.call(what = rbind, curMat)
curMat[,1] <- substr(curMat[,1], 9, nchar(curMat[,1]))
curMat[,2] <- substr(curMat[,2], 15, nchar(curMat[,2]))
resMat <- curMat[,1:2]
resMat[,1] <- gsub(pattern = " ", replacement = "", resMat[,1])
resMat[,2] <- gsub(pattern = " ", replacement = "", resMat[,2])
rownames(resMat) <- resMat[,1]
resMat
}
.T2G <- function(transcript, geneMat){
if(is.element(transcript, rownames(geneMat))){
res <- geneMat[transcript, 1]
}else{
res <- NA
}
res
}
#' @export
CMRAnnotation <- function(cmrMat = NULL, genomic = F, UTRMat = NULL, GTF = NULL, SNR = T,
annotation = c("location", "motifScan", "motifDetect", "GO"),
cmrSeq = NULL, RNAseq = NULL, motifPos = NULL, plot = T, ...){
if(length(annotation) > 1){
cat("Warnings: multiple annotation was provided, the first one will be used!")
annotation <- annotation[1]
}
if(genomic){
cmrMat <- G2T(bedPos = cmrMat, GTF = GTF)
#peakMat <- do.call(peakMat, rbind)
}else{
cmrMat <- cmrMat
}
if(annotation == "location"){
if(is.null(GTF)){
stop("Please provide the GTF!", "\n")
}
geneID <- .geneID(GTF = GTF)
geneID <- unique(geneID)
geneID[,2] <-  gsub(" ", "", x = geneID[,2], fixed = TRUE)
rownames(geneID) <- geneID[,2]
if(is.null(UTRMat)){
UTRMat <- getUTR(GTF = GTF)
}
class(UTRMat) <- "numeric"
if(!SNR){
if(is.null(RNAseq)){
stop("Please provide the RNA sequence!")
}
peaks <- cmrMat
if(is.null(motifPos)){
motifPos <- searchMotifPos(sequence = RNAseq, ...)
}
.convertSNR <- function(inputVec, motifPos){
curID <- inputVec[1]
curStart <- as.numeric(inputVec[2])
curEnd <- as.numeric(inputVec[3])
curMotif <- motifPos[[curID]]
curPos <- curMotif[which(curMotif >= curStart & curMotif <= curEnd)]
tmpMat <- matrix(NA, nrow = length(curPos), 2)
tmpMat[,1] <- curID
tmpMat[,2] <- curPos
tmpMat
}
resPosMat <- apply(cmrMat, 1, .convertSNR, motifPos = motifPos)
resPosMat <- do.call(rbind, resPosMat)
colnames(resPosMat) <- c("IDs", "Position")
peakMat <- resPosMat
}else{
peakMat <- cmrMat
}
################CMR distribution################################
.UTRPosition <- function(inputVec, UTRMat){
posSampleID <- inputVec[1]
posSamplePos <- as.numeric(inputVec[2])
curUTR <- as.numeric(UTRMat[posSampleID, ])
if(posSamplePos >= curUTR[5] & posSamplePos <= curUTR[6]){
res <- "three prime UTR"
}else if(posSamplePos >= curUTR[3] & posSamplePos <= curUTR[4]){
res <- "CDS"
}else{
res <- "five prime UTR"
}
res
}
peakMat <- peakMat[which(peakMat[,1] %in% rownames(UTRMat)),]
finalPosition <- apply(peakMat, 1, .UTRPosition, UTRMat = UTRMat)
peakMat <- cbind(peakMat, finalPosition)
resPos <- table(finalPosition)
########################CMR normalized distribution################
.normalizeDis <- function(inputVec, UTRMat){
curID <- inputVec[1]
curPos <- as.numeric(inputVec[2])
curRegion <- inputVec[3]
if(curRegion == "five prime UTR"){
curRes <- curPos/UTRMat[curID, 2]
}else if(curRegion == "CDS"){
curRes <- (curPos - UTRMat[curID,2] + 1)/((UTRMat[curID, 4] - UTRMat[curID, 3]) + 1) + 1
}else{
curRes <- (curPos - UTRMat[curID,5] + 1)/((UTRMat[curID, 6] - UTRMat[curID, 5]) + 1) + 2
}
curRes
}
positive.sample.position <- apply(peakMat, 1, .normalizeDis, UTRMat = UTRMat)
if(plot){
if(SNR){
par(mfrow = c(1,3))
par(mar=c(2, 2, 2, 2))
pie(resPos, col = c('yellow', "green", 'red'), labels = names(resPos),
main = "CMR distribution along the transcript")
plot(density(positive.sample.position), main =
"Distribution of CMR in the cDNA",
col = "red", lwd = 2, xaxt = "n")
rug(seq(0, 1, 0.001), col = "lightgreen")
rug(seq(1, 2, 0.001), col = "cadetblue3")
rug(seq(2, 3, 0.001), col = "red")
legend("topleft", col = c("lightgreen", "cadetblue3", "red"), lwd = c(5, 5, 5),
legend = c("5'UTR", "CDS", "3'UTR"))
aa <- table(peakMat[,1])
bb <- table(aa)
barplot(bb, col = rainbow(length(bb)),
main = "Transcripts with different CMRs.")
}else{
par(mfrow = c(2,2))
par(mar=c(2, 2, 2, 2))
pie(resPos, col = c('yellow', "green", 'red'), labels = names(resPos),
main = "CMR distribution along the transcript")
plot(density(positive.sample.position), main =
"Distribution of CMR in the cDNA",
col = "red", lwd = 2, xaxt = "n")
rug(seq(0, 1, 0.001), col = "lightgreen")
rug(seq(1, 2, 0.001), col = "cadetblue3")
rug(seq(2, 3, 0.001), col = "red")
legend("topleft", col = c("lightgreen", "cadetblue3", "red"), lwd = c(5, 5, 5),
legend = c("5'UTR", "CDS", "3'UTR"))
.peakmotifNumber <- function(inputVec, motifPos){
curID <- inputVec[1]
curMotif <- motifPos[[curID]]
motifNumber <- length(which(curMotif >= as.numeric(inputVec[2]) & curMotif <= as.numeric(inputVec[3])))
motifNumber
}
peakMotifNumber <- apply(cmrMat, 1, .peakmotifNumber, motifPos = motifPos)
tt <- table(peakMotifNumber)
barplot(tt, col = rainbow(length(tt)), main = "Peaks with different CMRs")
aa <- table(peakMat[,1])
bb <- table(aa)
barplot(bb, col = rainbow(length(bb)), main = "Transcripts with different CMRs.")
}
}
resList <- list(cmrMat = cmrMat, position = finalPosition,
distribution = positive.sample.position)
return(resList)
}
if(annotation == "motifScan"){
if(is.null(cmrSeq)){
stop("Please provide the CMR-related sequences.")
}
results <- motifScan(sequence = cmrSeq, ...)
return(results)
}
if(annotation == "motifDetect"){
if(is.null(cmrSeq)){
stop("Please provide the CMR-related sequences.")
}
results <- motifDetect(sequence = cmrSeq, ...)
return(results)
}
if(annotation == "GO"){
if(is.null(GTF)){
stop("Please provide the GTF file name!")
}
geneID <- .geneID(GTF = GTF)
rownames(geneID) <- geneID[,1]
interT <- intersect(geneID[,2], cmrMat[,1])
resGene <- geneID[interT, 1]
resGO <- runTopGO(geneID = resGene, ...)
return(resGO)
}
resList
}
cmrMat = peaks
geneID <- .geneID(GTF = GTF)
rownames(geneID) <- geneID[,1]
View(geneID)
interT <- intersect(geneID[,2], cmrMat[,1])
which(cmrMat[,1] %in% geneID[,2])
which(geneID[,2] %in% cmrMat[,1])
resGene <- geneID[which(geneID[,2] %in% cmrMat[,1]),1]
resGO <- runTopGO(geneID = resGene, ...)
resGene <- geneID[which(geneID[,2] %in% cmrMat[,1]),1]
resGO <- runTopGO(geneID = resGene)
?PSOL
psolResDic <- paste0(getwd(), "/")
psolResDic
psolResDic <- dir.create("psol")
dir.create("psol", showWarnings = F)
psolResDic <- paste0(getwd(), "/psol/")
psolResDic
data(sampleData)
positiveSamples <- sampleData$positives
negativeSamples <- sampleData$negatives
featureMat <- sampleData$featureMat
dir.create("psol", showWarnings = F)
psolResDic <- paste0(getwd(), "/psol/")
psolRes <- PSOL(featureMatrix = featureMat, positives = positiveSamples,
unlabels = negativeSamples, PSOLResDic = psolResDic,
cpus = 1)
?searchMotifPos
predSeqs <- system.file("extdata/test.fa", package = "PEA")
motifRes <- searchMotifPos(sequence = predSeqs, ...)
motifRes <- searchMotifPos(sequence = predSeqs)
motifRes
predSeqs <- "/home/malab14/research/00PEA/test.fa"
motifRes <- searchMotifPos(sequence = predSeqs, ...)
motifRes <- searchMotifPos(sequence = predSeqs)
motifRes
paste0(names(motifRes), motifRes)
paste0(names(motifRes), unlist(motifRes))
lapply(motifRes, length)
unlist(lapply(motifRes, length))
as.numeric(unlist(lapply(motifRes, length)))
IDs <- rep(x = names(motifRes),  as.numeric(unlist(lapply(motifRes, length))))
IDs
resSamples <- paste0(IDs, unlist(motifPos))
resSamples <- paste0(IDs, unlist(motifRes))
resSamples
resSamples <- paste0(IDs, "_", unlist(motifRes))
resSamples
predSequence <- extractSeqs(RNAseq = predSeqs, samples = resSamples)
featureMat <- featureEncoding(RNAseq = predS)
featureMat <- featureEncoding(RNAseq = predSequence, ...)
featureMat <- featureEncoding(RNAseq = predSequence)
?extractSeqs
?predict
model <- psolRes$model
pred.score <- predict(object = model, data.frame(featureMat),
type = "vote")[,'1']
pred.score
resMat <- matrix(NA, length(pred.score), 2)
resMat[,1] <- names(pred.score)
resMat[,2] <- as.numeric(pred.score)
View(resMat)
?extractSeqs
?searchMotifPos
?PSOL
?searchMotifPos
library(PEA)
library(PEA)
?findConfidentPosSamples
cDNA <- read.fasta(file = "/home/malab14/research/00PEA/0_TAIR10_cdna_20101214_updated.txt", as.string = T)
GTF <- read.table(file = "/home/malab14/research/00PEA/00review/PEA/inst/extdata/chromosome1.gtf",
sep = "\t", quote = "", header = F, stringsAsFactors = F)
View(GTF)
load("/home/malab14/research/00PEA/00review/PEA/data/sampleData.rda")
IDs <- c(sampleData$positives, sampleData$negatives)
View(GTF)
transcript <- subset(GTF, GTF$V3 == "transcript")
View(transcript)
substr(transcript$V9, 15, 20)
substr(transcript$V9[1], 15, 20)
substr(transcript$V9[1], 25, 26)
substr(transcript$V9[1], 35, 40)
substr(transcript$V9[1], 37, 47)
ID <- substr(transcript$V9, 37, 47)
ID <- unique(substr(transcript$V9, 37, 47))
IDs <- c(sampleData$positives, sampleData$negatives, ID)
cDNA <- cDNA[IDs]
write.fasta(toupper(unlist(cDNA)), file.out = "/home/malab14/research/00PEA/00review/PEA/inst/extdata/chr1_cdna.fa",
names = names(cDNA))
cDNA
IDs
ID
posID <- do.call(rbind, strsplit(sampleData$positives, "_"))
posID <- do.call(rbind, strsplit(sampleData$positives, "_"))[,1]
negID <- do.call(rbind, strsplit(sampleData$negatives, "_"))[,1]
posID <- do.call(rbind, strsplit(sampleData$positives, "_"))[,1]
negID <- do.call(rbind, strsplit(sampleData$negatives, "_"))[,1]
IDs <- c(posID, negID, ID)
cDNA <- cDNA[IDs]
cDNA
cDNA <- read.fasta(file = "/home/malab14/research/00PEA/0_TAIR10_cdna_20101214_updated.txt", as.string = T)
cDNA <- cDNA[IDs]
write.fasta(toupper(unlist(cDNA)), file.out = "/home/malab14/research/00PEA/00review/PEA/inst/extdata/chr1_cdna.fa",
names = names(cDNA))
write.fasta(sequences = as.list(toupper(unlist(cDNA))),
file.out = "/home/malab14/research/00PEA/00review/PEA/inst/extdata/chr1_cdna.fa",
names = names(cDNA))
input.bam <- system.file("extdata/chr1_input_test.bam", package = "PEA")
RIP.bam <- system.file("extdata/chr1_RIP_test.bam", package = "PEA")
refGenome <- system.file("extdata/chromosome1.fa", package = "PEA")
cDNA <- system.file("extdata/chr1_cdna.fa", package = "PEA")
GTF <- system.file("extdata/chromosome1.gtf", package = "PEA")
##m6A peak calling using sliding window-based method
cmrMat <- CMRCalling(CMR = "m6A", IPBAM = RIP.bam, inputBAM = input.bam,
method = "SlidingWindow", mappedInput = 17472,
mappedRIP = 20072, refGenome = refGenome)
#Convert genomic position to cDNA position
peaks <- G2T(bedPos = cmrMat, GTF = GTF)
##Search consensus motif in cDNA sequence
motifPos <- searchMotifPos(sequence = cDNA)
##Find confident positive samples
posSamples <- findConfidentPosSamples(peaks = peaks, motifPos = motifPos)
?featureEncoding
##Load data
data(sampleData)
positiveSamples <- sampleData$positives
cDNA <- "/home/malab14/research/00PEA/00review/PEA/inst/extdata/chr1_cdna.fa"
posSeq <- extractSeqs(RNAseq = cDNA, samples = positiveSamples, seqLen = 101)
##Performing feature encoding using Binary, k-mer and PseDNC encoding schmes
posFeatureMat <-  featureEncoding(RNAseq = posSeq)
?readMapping
fq <- "/home/malab14/research/00PEA/00review/PEA/inst/extdata/test.fq"
referenceGenome <- "/home/malab14/research/00PEA/00review/PEA/inst/extdata/chr1_cdna.fa"
setwd("/home/malab14/research/00PEA/00review/PEA/inst/extdata")
test.bam <- readMapping(alignment = 'tophat', fq = fq,
refGenome = referenceGenome, paired = F)
fq <- "/home/malab14/research/00PEA/00review/PEA/inst/extdata/test.fastq"
test.bam <- readMapping(alignment = 'tophat', fq = fq,
refGenome = referenceGenome, paired = F)
fq <-  system.file("extdata/test.fq", package = "PEA")
referenceGenome <- system.file("extdata/chromosome1.fa", package = "PEA")
#reads mapping using tophat with default parameter
test.bam <- readMapping(alignment = 'tophat', fq = fq,
refGenome = referenceGenome, paired = F)
alignment = 'tophat'
fq
fq <- "/home/malab14/research/00PEA/00review/PEA/inst/extdata/test.fastq"
SRAName <- unlist(strsplit(fq, ".fastq", fixed = T))
SRAName
alignmentPara <- paste0(alignment, " ", alignPara, " --bowtie1 ", " -o ",
SRAName, "_tophat ", index, " ", fq)
alignPara <- NULL
alignmentPara <- paste0(alignment, " ", alignPara, " --bowtie1 ", " -o ",
SRAName, "_tophat ", index, " ", fq)
alignmentPara
###########CMR (Chemical Modification of RNA) Calling
##########author: Jingjing Zhai, Chuang Ma
##########Contact: zhaijingjing603@gmail.com
.generateIndex <- function(alignment = c("bowtie", "bowtie2", "tophat",
"tophat2", "hisat", "hisat2"),
refGenome = NULL, softwareDir = NULL){
if(is.null(refGenome)){
stop("Please provide the reference genome!")
}
if(alignment == "tophat" | alignment == 'bowtie'){
tmpPara <- paste0("bowtie-build ", refGenome, " ", refGenome)
}else if(alignment == "tophat2" | alignment == 'bowtie2'){
tmpPara <- paste0("bowtie2-build ", refGenome, " ", refGenome)
}else{
tmpPara <- paste0(alignment, "-build ", refGenome, " ", refGenome)
}
tmpPara
}
tmpPara <- .generateIndex(alignment = alignment, refGenome = refGenome,
softwareDir = softwareDir)
system(tmpPara)
index <- refGenome
alignmentPara <- paste0(alignment, " ", alignPara, " --bowtie1 ", " -o ",
SRAName, "_tophat ", index, " ", fq)
alignmentPara
system(alignmentPara)
resList <- list()
resList[['command']] <- alignmentPara
resList[["resDir"]] <- resDic
test.bam <- readMapping(alignment = 'tophat', fq = fq,
refGenome = referenceGenome, paired = F)
